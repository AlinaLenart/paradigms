sealed trait Tree3[+A]
case object Empty extends Tree3[Nothing]
case class Node0[A](value: A) extends Tree3[A]
case class Node1[A](head: A, tail: Tree3[A]) extends Tree3[A]
case class Node2[A](head: A, left: Tree3[A], right: Tree3[A]) extends Tree3[A]
case class Node3[A](head: A, left: Tree3[A], middle: Tree3[A], right: Tree3[A]) extends Tree3[A]

def combineTree3[A, B](f: (A, A) => B, tree1: Tree3[A], tree2: Tree3[A]): Tree3[B] = (tree1, tree2) match {
  case (Empty, _) | (_, Empty) => Empty
  case (Node0(v1), Node0(v2)) => Node0(f(v1, v2))
  case (Node1(v1, t1), Node1(v2, t2)) => Node1(f(v1, v2), combineTree3(f, t1, t2))
  case (Node2(v1, l1, r1), Node2(v2, l2, r2)) =>
    Node2(f(v1, v2), combineTree3(f, l1, l2), combineTree3(f, r1, r2))
  case (Node3(v1, l1, m1, r1), Node3(v2, l2, m2, r2)) =>
    Node3(f(v1, v2), combineTree3(f, l1, l2), combineTree3(f, m1, m2), combineTree3(f, r1, r2))

  case (Node2(v1, l1, r1), Node3(v2, l2, m2, r2)) =>
    Node3(f(v1, v2), combineTree3(f, l1, l2), combineTree3(f, Empty, m2), combineTree3(f, r1, r2))

  case (Node3(v2, l2, m2, r2), Node2(v1, l1, r1)) =>
    Node3(f(v1, v2), combineTree3(f, l1, l2), combineTree3(f, Empty, m2), combineTree3(f, r1, r2))

  case (Node1(v1, t1), Node2(v2, l2, r2)) =>
    Node2(f(v1, v2), combineTree3(f, t1, l2), combineTree3(f, Empty, r2))

  case (Node2(v2, l2, r2), Node1(v1, t1)) =>
    Node2(f(v1, v2), combineTree3(f, t1, l2), combineTree3(f, Empty, r2))

  case (Node1(v1, t1), Node3(v2, l2, m2, r2)) =>
    Node3(f(v1, v2), combineTree3(f, t1, l2), combineTree3(f, Empty, m2), combineTree3(f, Empty, r2))

  case (Node3(v2, l2, m2, r2), Node1(v1, t1)) =>
    Node3(f(v1, v2), combineTree3(f, t1, l2), combineTree3(f, Empty, m2), combineTree3(f, Empty, r2))

  case (Node0(v1), Node1(v2, _)) => Node0(f(v1, v2))
  case (Node0(v1), Node2(v2, _, _)) => Node0(f(v1, v2))
  case (Node0(v1), Node3(v2, _, _, _)) => Node0(f(v1, v2))

  case (Node1(v1, _), Node0(v2)) => Node0(f(v1, v2))
  case (Node2(v1, _, _), Node0(v2)) => Node0(f(v1, v2))
  case (Node3(v1, _, _, _), Node0(v2)) => Node0(f(v1, v2))
}

val emptyTree: Tree3[Int] = Empty
val singleNodeTree: Tree3[Int] = Node0(1)
val singleNodeWithChild: Tree3[Int] = Node1(1, Node0(1))
val singleNodeWithTwoChildren: Tree3[Int] = Node2(1, Node0(1), Node0(1))
val singleNodeWithThreeChildren: Tree3[Int] = Node3(1, Node0(1), Node0(1), Node0(1))

val tree1: Tree3[Int] =
  Node3(1,
    Node1(1, Node0(1)),
    Node0(1),
    Node0(1)
  )

val tree2: Tree3[Int] =
  Node3(2,
    Node1(2, Empty),
    Empty,
    Node0(2)
  )


val combinedTree1 = combineTree3((x: Int, y: Int) => x + y, tree1, tree2)
val combinedTree2 = combineTree3((x: Int, y: Int) => x + y, emptyTree, tree2)
val combinedTree3 = combineTree3((x: Int, y: Int) => x + y, singleNodeTree, tree2)
val combinedTree4 = combineTree3((x: Int, y: Int) => x + y, singleNodeWithTwoChildren, singleNodeWithThreeChildren)
